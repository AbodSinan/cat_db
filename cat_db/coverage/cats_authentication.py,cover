> from datetime import datetime, timedelta
> import pytz
  
> from django.utils import timezone
> from django.conf import settings
  
> from rest_framework.authentication import TokenAuthentication
> from rest_framework.exceptions import AuthenticationFailed
> from rest_framework.authtoken.models import Token
  
> def expires_in(token):
!     time_elapsed = timezone.now() - token.created
!     left_time = timedelta(seconds = settings.TOKEN_EXPIRED_AFTER_SECONDS) - time_elapsed
!     return left_time
  
> def is_token_expired(token):
!     return expires_in(token) < timedelta(seconds = 0)
  
  # An optional custom Authentication that can be used, but JWT is more robust
> class ExpiringTokenAuthentication(TokenAuthentication):
>     """
>     If token is expired then it will be removed
>     and new one with different key will be created
>     """
>     def authenticate_credentials(self, key):
!         try:
!             token = self.model.objects.get(key=key)
!         except self.model.DoesNotExist:
!             raise AuthenticationFailed('Invalid token')
  
!         if not token.user.is_active:
!             raise AuthenticationFailed('User inactive or deleted')
  
          # This is required for the time comparison
!         utc_now = datetime.utcnow()
!         utc_now = utc_now.replace(tzinfo=pytz.utc)
  
!         if is_token_expired(token):
!             raise AuthenticationFailed('Token has expired')
  
!         return token.user, token
